@Configuration标注在类上，相当于把该类作为spring的xml配置文件中的<beans>，作用为：配置spring容器(应用上下文)

@Component(该注解表明该类会作为组建类)
	spring应用上下文中所有的bean都会给点一个ID,将类名的第一个字母变为小写,如果想为这个bean设置不同的ID作为你所期望的ID传递给@Component注解 可做如下修改：
		@Component("myName")
		当然还有另一种bean命名方式,这种凡是不适用@Component注解,而是使用Java依赖注入规范中所体统的@Name注解来为bean设置ID：
		@Named("myName")
		二者之间有一些细微的差异,但是大多数场景中,它们是可以替换的。
							
@ComponentScan(扫包,默认扫描当前包)
	想要扫描不同包时,在value属性中指明包的名称。
	如果想更加清晰地表名你所设置的是基础包,可以通过basePackages属性进行设置：
	@ComponentScan(basePackages="soundsystem")
	basePackages是复数形式,可配置多个包,如@ComponentScan(basePackages={"soundsystem","video"})
	当需要重构代码的时,所指定的基础包可能会出现错误,@ComponentScan还提供了另一种方法,就是将其指定为包中所包含的类或接口：
	@ComponentScan(basePackageClasses={CDPlayer.class, DVDPlayer.class})
	
@Autowired(自动装配bean,Spring特有的注解)
	通过这个bean的构造器来实例化并且会传入该bean,注解不仅能够用在构造器上,还可以用在属性的Setter方法上,还有其他的方法上
	Spring都会尝试满足方法参数上所声明的依赖. 注: 有且只有一个bean匹配依赖需求的话,那么这个bean将会被装配起来.
	如果没有匹配的bean,在应用上下文创建的时候,Spring会抛出一个异常.为了避免异常的出现,可以将@Autowired的required属性设置为false,该属性为false时,
	Spring会尝试执行自动装配,但是如果没有的bean的话,Spring会让这个bean处于为匹配的状态.如果没有null检查的话,这个为装配的属性可能会出现NullPointerException.
	如果有多个bean满足依赖关系,Spring会抛出一个异常,表明没有明确指定要选择哪个bean进行装配.
	@Inject
	可用该注解替代@Autowired注解,有细微差别,Spring同时支持
	
@ContextConfiguration(告诉需要在哪个类中加载配置)

@EnableAspectJAutoProxy启用AspectJ自动代理
